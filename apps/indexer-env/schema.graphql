# Core Pool entity - represents a game pool
type Pool {
  id: ID!                           # Pool ID from contract
  creator: Creator!                 # Creator who made this pool
  status: PoolStatus!               # Current pool status
  entryFee: BigInt!                 # Entry fee in wei
  maxPlayers: Int!                  # Maximum players allowed
  currentPlayers: Int!              # Current number of players
  prizePool: BigInt!                # Total prize pool in wei
  currentRound: Int!                # Current game round (0 = not started)
  winner: Player                    # Winner if game completed
  prizeAmount: BigInt               # Final prize amount for winner

  # Timestamps
  createdAt: BigInt!                # Block timestamp when created
  activatedAt: BigInt               # Block timestamp when activated
  completedAt: BigInt               # Block timestamp when completed

  # Block information
  createdAtBlock: BigInt!           # Block number when created
  activatedAtBlock: BigInt          # Block number when activated
  completedAtBlock: BigInt          # Block number when completed

  # Network information
  chainId: Int!                     # Chain ID (42220 for mainnet, 44787 for testnet)

  # Relationships
  players: [PlayerPool!]! @derivedFrom(field: "pool")
  rounds: [GameRound!]! @derivedFrom(field: "pool")
  playerChoices: [PlayerChoice!]! @derivedFrom(field: "pool")
  events: [Event!]! @derivedFrom(field: "pool")
}

# Player entity - represents a game participant
type Player {
  id: ID!                           # Player address
  address: String!                  # Player address as string

  # Statistics
  totalPoolsJoined: Int!            # Total number of pools joined
  totalPoolsWon: Int!               # Total number of pools won
  totalPoolsEliminated: Int!        # Total number of pools eliminated from
  totalEarnings: BigInt!            # Total winnings in wei
  totalSpent: BigInt!               # Total entry fees spent in wei

  # Timestamps
  firstJoinedAt: BigInt!            # First time player joined any pool
  lastActiveAt: BigInt!             # Last time player was active

  # Relationships
  pools: [PlayerPool!]! @derivedFrom(field: "player")
  choices: [PlayerChoice!]! @derivedFrom(field: "player")
  wonPools: [Pool!]! @derivedFrom(field: "winner")
  events: [Event!]! @derivedFrom(field: "player")
}

# Creator entity - represents a pool creator
type Creator {
  id: ID!                           # Creator address
  address: String!                  # Creator address as string

  # Staking information
  totalStaked: BigInt!              # Total amount staked in wei
  totalEarned: BigInt!              # Total rewards earned in wei
  totalPoolsEligible: Int!          # Number of pools eligible to create

  # Pool statistics
  totalPoolsCreated: Int!           # Total number of pools created
  completedPools: Int!              # Number of completed pools
  abandonedPools: Int!              # Number of abandoned pools

  # Verification status
  isVerified: Boolean!              # Whether creator is verified
  verifiedAt: BigInt                # Block timestamp when verified
  attestationId: String             # Self Protocol attestation ID
  verificationBonusPools: Int!      # Bonus pools from verification

  # Timestamps
  firstStakedAt: BigInt!            # First time creator staked
  lastActiveAt: BigInt!             # Last time creator was active

  # Network information
  chainId: Int!                     # Chain ID

  # Relationships
  createdPools: [Pool!]! @derivedFrom(field: "creator")
  stakeEvents: [StakeEvent!]! @derivedFrom(field: "creator")
  events: [Event!]! @derivedFrom(field: "creator")
}

# PlayerPool entity - represents a player's participation in a specific pool
type PlayerPool {
  id: ID!                           # Composite ID: poolId-playerAddress
  player: Player!                   # The player
  pool: Pool!                       # The pool
  status: PlayerStatus!             # Player status in this pool

  # Participation info
  joinedAt: BigInt!                 # Block timestamp when joined
  joinedAtBlock: BigInt!            # Block number when joined
  eliminatedAt: BigInt              # Block timestamp when eliminated
  eliminatedAtBlock: BigInt         # Block number when eliminated
  eliminatedInRound: Int            # Round number when eliminated

  # Network information
  chainId: Int!                     # Chain ID
}

# GameRound entity - represents a game round
type GameRound {
  id: ID!                           # Composite ID: poolId-roundNumber
  pool: Pool!                       # The pool this round belongs to
  roundNumber: Int!                 # Round number (1, 2, 3, ...)

  # Round statistics
  eliminatedPlayers: Int!           # Players eliminated this round
  remainingPlayers: Int!            # Players remaining after round
  roundWinners: Int!                # Players who chose the minority

  # Timestamps
  createdAt: BigInt!                # Block timestamp when round started
  createdAtBlock: BigInt!           # Block number when round started

  # Network information
  chainId: Int!                     # Chain ID

  # Relationships
  choices: [PlayerChoice!]! @derivedFrom(field: "round")
}

# PlayerChoice entity - represents a player's choice in a round
type PlayerChoice {
  id: ID!                           # Composite ID: poolId-playerAddress-round
  player: Player!                   # The player who made the choice
  pool: Pool!                       # The pool
  round: GameRound!                 # The round
  choice: PlayerChoiceType!         # The choice made (HEADS or TAILS)

  # Timestamps
  timestamp: BigInt!                # Block timestamp when choice was made
  blockNumber: BigInt!              # Block number when choice was made

  # Network information
  chainId: Int!                     # Chain ID
}

# Event entity - represents all blockchain events
type Event {
  id: ID!                           # Unique event ID
  eventType: EventType!             # Type of event
  pool: Pool                        # Related pool (if applicable)
  player: Player                    # Related player (if applicable)
  creator: Creator                  # Related creator (if applicable)

  # Event metadata
  timestamp: BigInt!                # Block timestamp
  blockNumber: BigInt!              # Block number
  chainId: Int!                     # Chain ID
  transactionHash: String!          # Transaction hash
  logIndex: Int!                    # Log index within transaction
}

# StakeEvent entity - represents staking events
type StakeEvent {
  id: ID!                           # Unique event ID
  eventType: StakeEventType!        # Type of stake event
  creator: Creator!                 # Creator who staked/unstaked
  amount: BigInt!                   # Amount staked/unstaked

  # Event metadata
  timestamp: BigInt!                # Block timestamp
  blockNumber: BigInt!              # Block number
  chainId: Int!                     # Chain ID
  transactionHash: String!          # Transaction hash
}

# System statistics aggregated across all pools
type SystemStats {
  id: ID!                           # Always "SYSTEM_STATS"
  totalPools: Int!                  # Total pools created
  activePools: Int!                 # Currently active pools
  completedPools: Int!              # Completed pools
  totalPlayers: Int!                # Unique players who have joined
  totalCreators: Int!               # Unique creators who have created pools
  totalVolume: BigInt!              # Total volume across all pools
  totalPrizesPaid: BigInt!          # Total prizes paid out
  lastUpdated: BigInt!              # Last update timestamp
}

# Network statistics per chain
type NetworkStats {
  id: ID!                           # Chain ID as string
  chainId: Int!                     # Chain ID
  totalPools: Int!                  # Total pools on this network
  activePools: Int!                 # Active pools on this network
  completedPools: Int!              # Completed pools on this network
  totalVolume: BigInt!              # Total volume on this network
  lastUpdated: BigInt!              # Last update timestamp
}

# Pool statistics aggregated data
type PoolStats {
  id: ID!                           # Always "POOL_STATS"
  totalPools: Int!                  # Total pools
  activePools: Int!                 # Active pools
  completedPools: Int!              # Completed pools
  totalPlayers: Int!                # Total unique players
  totalVolume: BigInt!              # Total volume
  totalPrizesPaid: BigInt!          # Total prizes paid
  averagePoolSize: Int!             # Average number of players per pool
  lastUpdated: BigInt!              # Last update timestamp
  chainId: Int!                     # Chain ID
}

# Enums
enum PoolStatus {
  WAITING_FOR_PLAYERS              # Pool created but not full
  ACTIVE                           # Pool is active and game is running
  COMPLETED                        # Pool completed with a winner
  ABANDONED                        # Pool abandoned/cancelled
}

enum PlayerStatus {
  ACTIVE                           # Player is still in the game
  ELIMINATED                       # Player was eliminated
  WON                              # Player won the pool
}

enum PlayerChoiceType {
  HEADS                            # Player chose heads (0)
  TAILS                            # Player chose tails (1)
}

enum EventType {
  POOL_CREATED                     # Pool was created
  PLAYER_JOINED                    # Player joined a pool
  POOL_ACTIVATED                   # Pool became active
  PLAYER_ELIMINATED                # Player was eliminated
  POOL_COMPLETED                   # Pool was completed
  POOL_ABANDONED                   # Pool was abandoned
  CREATOR_VERIFIED                 # Creator was verified
  STAKE_DEPOSITED                  # Creator deposited stake
  STAKE_WITHDRAWN                  # Creator withdrew stake
  ROUND_RESOLVED                   # Game round was resolved
  CREATOR_REWARD_CLAIMED           # Creator claimed rewards
  PROJECT_POOL_UPDATED             # Project pool was updated
  SCOPE_UPDATED                    # Scope was updated
}

enum StakeEventType {
  STAKE                            # Stake deposited
  UNSTAKE                          # Stake withdrawn
}